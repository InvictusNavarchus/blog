---
title: Finding the common characteristics among Top 10,000 movies of all time
---

---
title: Analyzing Top 10.000 Most Popular Movies on IMDB
description: Finding the common characteristics among Top 10.000 movies of all time
---

# EDA with R 

## Setup

### Library

```{r}
library(tidyverse)
library(naniar)
library(summarytools)
library(janitor)
library(DataExplorer)
library(scales)
```

### Options

```{r}
update_geom_defaults("bar", list(fill = 'grey', color = 'black'))
```

### Dataset

```{r}
df <- read_csv('top_10_000_movies.csv', na = '\\N')
```

## Clean Data

```{r}
df
```

### Check Missing Data

```{r}
df |> 
  vis_miss()
```

### Check Numeric Distribution

#### Overall

```{r}
df |> 
  plot_histogram(ncol = 1)
```

#### Average Rating

```{r}
df |> 
  ggplot(aes(averageRating)) +
  geom_histogram(binwidth = 1) +
  scale_x_continuous(breaks = seq(0,10,1))
```

#### Runtime Minutes

```{r}
df |> 
  ggplot(aes(runtimeMinutes)) +
  geom_histogram()
```

```{r}
df |> 
  ggplot(aes(runtimeMinutes)) +
  geom_histogram() +
  ylim(0,20)
```

#### Num Votes

```{r}
df |> 
  pull(numVotes) |> 
  cut(breaks = seq(1, 3000000, 100000), dig.lab = 50, right = FALSE, include.lowest = TRUE) |> 
  tabyl() |> 
  as.tibble() |> 
  rename(range = 1) |> 
  mutate(percent = label_percent(accuracy=0.001)(percent)) |> 
  select(-valid_percent)
  # mutate(percent = label_percent(accuracy=0.01)(percent))
  # mutate(range = format(range, big.mark = ','))
```

```{r}
df |> 
  ggplot(aes(numVotes)) +
  geom_histogram() +
  ylim(c(0, 100)) +
  scale_x_continuous(labels = comma)
```

```{r}
df |> 
  ggplot(aes(startYear)) +
  geom_histogram()
```

#### Genre

```{r}
df <- df |> 
  mutate(genres = fct_rev(fct_infreq(genres)))
```

```{r}
df |> 
  count(genres) |> 
  arrange(desc(n)) |>
  slice_head(n = 10) |> 
  ggplot(aes(n, genres)) +
  geom_col()
```

```{r}
df_unnested_genre <- df |> 
  mutate(genres = str_split(genres, ',')) |> 
  unnest_longer(genres) |> 
  mutate(genres = fct_rev(fct_infreq(genres)))
```

```{r}
df_unnested_genre |> 
  count(genres) |> 
  arrange(desc(n)) |> 
  slice_head(n = 10) |> 
  ggplot(aes(genres, n)) +
  geom_col() +
  coord_flip()
```

## Analyze Data

### Most Common Runtime Range

```{r}
df |> 
  ggplot(aes(runtimeMinutes)) +
  geom_histogram(aes(fill = runtimeMinutes >= 80 & runtimeMinutes <= 120), 
                 binwidth = 40, boundary = 0) +
  scale_x_continuous(breaks = seq(0, 240, 40)) +
  scale_fill_manual(values = c("FALSE" = "grey", "TRUE" = "red"),
                    labels = c("FALSE" = "Other Intervals", "TRUE" = "Most Frequent Runtime Interval")) +
  labs(fill = "") +
  theme(legend.position = "bottom")
```

```{r}
df |> 
  pull(runtimeMinutes) |> 
  cut(breaks = seq(1, 600, 40), dig.lab = 50) |> 
  tabyl() |> 
  as.tibble() |> 
  rename(range = 1) |> 
  mutate(percent = label_percent(accuracy=0.01)(percent)) |> 
  select(-valid_percent)
```

### Most Common Genre Combinations

```{r}
df |> 
  count(genres) |> 
  arrange(desc(n)) |>
  mutate(is_top3 = ifelse(row_number() <= 3, "Top 3", "Others")) |>  # Flag top 5
  slice_head(n = 10) |> 
  ggplot(aes(n, genres, fill = is_top3)) +  # Use fill aesthetic to differentiate
  geom_col() +
  scale_fill_manual(values = c("Top 3" = "#FFA07A", "Others" = "grey")) +  # Highlight top 5
  theme_minimal() +
  labs(fill = "Group")  # Add legend
```

### Most Common Individual Genres

```{r}
df_unnested_genre |> 
  count(genres) |> 
  arrange(desc(n)) |> 
  slice_head(n = 10) |> 
  mutate(rank = if_else(row_number() <= 3, 'Top_3', 'Others')) |> 
  ggplot(aes(genres, n, fill = rank)) +
  geom_col() +
  scale_fill_manual(values = c('Top_' = '#FFA07A', 'Others' = 'grey')) +
  coord_flip()
```
