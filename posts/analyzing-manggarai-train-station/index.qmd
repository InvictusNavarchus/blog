---
title: "Analyzing Busiest Indonesia's Train Station: Manggarai"
description: tobe-written
date: 2024-08-06:21:00:00
categories: [Project, R]
draft: true
---

## Introduction

in Indonesia, especially in Jakarta, train stations are popular methods for transportation. Out of over 50 train stations, the busiest among them is Manggarai, which also act as the main hub for trains from all different routes. If you're an Indonesian, you know how busy it is during the morning.

With a full day schedule from 00:00 to 23:00, let's uncover what interesting insight we could find.

## Collecting Data

There is an official national train company website, [KAI Commuter](https://commuterline.id/perjalanan-krl/jadwal-kereta), where you can query the schedule based on specified departure and destination. The schedule will then be displayed on the page.

![](images/query-schedule.png)

We can then scrape the page to collect the data. However, I found something interesting when I opened up the dev tools and go to the network tab

![](images/devtool-network-01.png)

You can see it got the data from an api. If you open the request url, you'll see the full JSON file:

![](images/api-jsonfile-01.png)

Unfortunately, the trick no longer works. That was a week ago. Now, if you try the same trick, you'll get a 401 unauthorized access instead.

![](images/unauthorized-access-01.png)

## Parsing Data

First, we need to transform them to a data frame format, where each key will be its own column. As usual, let's load up the weapon, tidyverse!

```{r}
library(tidyverse)
library(jsonlite)
```

```{r}
jsondata <- read_json('./manggarai-schedule.json')
jsondata <- jsondata$data
df <- tibble(schedule = jsondata)
df <- df |> unnest_wider(schedule)
```

## Cleaning Data

### Remove Irrelevant Columns

There isn't any particular objective at hand. I just want to explore the data and find any interesting insights. So, any column might be needed later. However, there are 2 columns that are less likely to be used: train_id and color.

color is obvious. It was used to differentiate the routes visually on KAI Commuterline. However, I'm thinking for using them here for the same purpose as well when drawing plots. So, let's keep that for now.

train_id is just the identifier of each train. It's not a useful information for regular customers because any train is virtually the same. Nevertheless, I'll keep that too, as I'm curious if any particular train stand out.

### Rename Columns

It's good enough it is, with snake_case and quite descriptive names. But we can make it better by changing a few:

1.  'ka' in `ka_name` stands for 'Kereta Api', which means 'trains'. It looks odd because the rest of the columns use English. So, we can rename it to `train_name`. Honestly, they don't feel like names at all, they're more like routes. Or maybe, that's where they got the names from. Anyway, let's leave it as `train_name`.
2.  since there is `dest_time`, we can change `dest` to `dest_city.`
3.  we can rename `time_est` to `est_time` for better consistency with `dest_time`. In fact, the word `est` itself is not quite clear, so we can rename it further as `arrival_time`
4.  'destination' would be much clearer than just 'dest', so let's rename all 'dest' to 'destination'

```{r}
df |> names()
```

```{r}
df_renamed <- df |> 
  rename(train_name = ka_name,
         destination_city = dest,
         arrival_time = time_est,
         destination_time = dest_time)
```

```{r}
df_renamed |>  names()
```

### Correct Data Types

All the columns are currently in `chr` data type. So, we need to fix each one of them.

```{r}
df_renamed |> str()
```

1.  `train_id`: It contains both numbers and letters, so let's leave it as `chr`
2.  `ka_name`: this column contains a limited set of labels, so `factor` would be more appropriate
3.  `route_name`, `dest`: same reason as `ka_name`
4.  `time_est`, `dest_time`: date objects. More specifically, a period object from `lubridate`
5.  `color`: kinda tricky. We know there are millions of possible color combinations. But, we also know the train station only uses around 5 of them. Well, let's count it first. if there's truly only few, we'll convert them to `factor`.

```{r}
df_renamed |> 
  count(color, name = 'total')
```

Ahh, that's even less. Alright, `factor` it is.

```{r}
df_correct_types <- df_renamed |> 
  mutate(train_name = as_factor(train_name),
         route_name = as_factor(route_name),
         destination_city = as_factor(destination_city),
         arrival_time = hms(arrival_time),
         color = as_factor(color),
         destination_time = hms(destination_time)
         )
```

```{r}
df_correct_types
```

Alright, everything looks great. Let's move on to analysis.

## Analyzing Data

Since there's no specific objectives, there's many insights we could look for.

### Peak Hours

The first thing that comes to my mind is finding the peak hours. Knowing this, we can anticipate when is the best time to go to the station.

Although, the ideal way to deduce this is to have the data of the passengers' traffic: how many that comes every day and every hour. Nevertheless, we could still infer it based on the amount of trains there are at the moment. It's logical for the company to increases it as the traffic goes up.

To get the peak hours, we can count the number of trains per hour and aggregate the sum.

```{r}
df_correct_types |> 
  mutate(hour = hour(arrival_time),
         .after = arrival_time) |> 
  count(hour, name = 'total_trains')
```

So, the peak is on hour 7 and 16, with a total of 37 trains.

```{r}
df_correct_types |> 
  mutate(hour = hour(arrival_time),
         .after = arrival_time) |> 
  count(hour, name = 'total_trains') |> 
  ggplot(aes(hour, total_trains)) +
  geom_line()
```

We can also group it by the lines.

```{r}
df_correct_types |> 
  mutate(hour = hour(arrival_time),
         .after = arrival_time) |> 
  count(hour, train_name, name = 'total_trains') |> 
  ggplot(aes(hour, total_trains, color = train_name)) +
  geom_line()
```
